entity Gateway {
	name String,
    type GatewayType,
	environmentName String,
	stage EnvironmentType,
	connectorType ConnectorType,
	defaultFromEndpointType String,
	defaultToEndpointType String,
	defaultErrorEndpointType String
}

entity EnvironmentVariables {
	key String,
	value String
}

entity Flow {
	name String,
	type String,
	autoStart Boolean,	
	offLoading Boolean,
	maximumRedeliveries Integer,
	redeliveryDelay Integer,
	loadBalancing Boolean,
	instances Integer		
}

entity FromEndpoint {
	type EndpointType,
    uri String,
    options String
}

entity ToEndpoint {
	type EndpointType,
    uri String,
    options String
}

entity ErrorEndpoint {
	type EndpointType,
    uri String,
    options String
}

entity WireTapEndpoint {
	type EndpointType,
    uri String,
    options String
}

entity Service {
	name String,
	type String	
}

entity ServiceKeys {
	key String,
	value String,
	type String	
}

entity Header {
	name String
}

entity HeaderKeys {
	key String,
	value String,
	type String	
}

entity Maintenance {
	startTime Instant,
	endTime Instant,
	duration Instant,
	frequency String
}

entity Security {
	url String,
	certificateName String,
	certificateFile Blob,
	certificateExpiry Instant,
}

entity Broker {
	name String,
	autoStart Boolean,
	type String,
	configuration String,
}


enum GatewayType {
    ADAPTER, BROKER, API, SOAP
}

enum EnvironmentType {
    DEVELOPMENT, TEST, ACCEPTANCE, PRODUCTION
}

enum ConnectorType {
    CAMEL,SPRINGINTEGRATION,CURL
}

enum EndpointType {
   ACTIVEMQ, FILE, HTTP4, KAFKA, SFTP, SJMS, SMTP, SONICMQ, SQL, STREAM, VM, WASTEBIN 
}

relationship OneToOne {
	Gateway{wiretapEndpoint} to WireTapEndpoint
}

relationship OneToMany {
	Gateway{flow} to Flow
}

relationship OneToMany {
	Gateway{environmentVariables} to EnvironmentVariables
}

relationship OneToOne {
	Flow{fromEndpoint} to FromEndpoint
}

relationship OneToOne {
	Flow{errorEndpoint} to ErrorEndpoint
}

relationship OneToMany {
	Flow{toEndpoint} to ToEndpoint
}

relationship ManyToOne {
	FromEndpoint{service} to Service,
    ToEndpoint{service} to Service,
    ErrorEndpoint{service} to Service
    WireTapEndpoint{service} to Service	
}

relationship ManyToOne {
	FromEndpoint{header} to Header,
    ToEndpoint{header} to Header,
    ErrorEndpoint{header} to Header
    WireTapEndpoint{header} to Header
}

relationship OneToMany {
	Service{serviceKeys} to ServiceKeys
}

relationship OneToMany {
	Header{headerKeys} to HeaderKeys
}

relationship OneToOne {
	Maintenance{flow} to Flow
}

// Set pagination options
paginate Flow with infinite-scroll

dto * with mapstruct

// Set service options to all except few
service all with serviceImpl