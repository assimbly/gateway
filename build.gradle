import org.gradle.internal.os.OperatingSystem


buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()

        /*

        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }

        maven{  name = "Aurea"
            url "https://int-factory.aurea.com/nexus/content/repositories/sonic-releases/"
        }

        maven{ name = "Assimbly Base"
            url = uri("https://maven.pkg.github.com/assimbly/base")
            credentials {
                username = project.findProperty("mavenUser") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("mavenToken") ?: System.getenv("GITHUB_TOKEN")}
        }

        maven{ name = "Assimbly Runtime"
            url = uri("https://maven.pkg.github.com/assimbly/runtime")
            credentials {
                username = project.findProperty("mavenUser") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("mavenToken") ?: System.getenv("GITHUB_TOKEN")}
        }

        maven{  name = "Assimbly Custom Components"
            url = uri("https://maven.pkg.github.com/assimbly/custom-components")
            credentials {
                username = project.findProperty("mavenUser") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("mavenToken") ?: System.getenv("GITHUB_TOKEN")}
        }
         */
    }

}


plugins {
    id "ua.eshepelyuk.ManifestClasspath" version "1.0.0"
    id "application"
    id "java"
    id "java-library"
    id "maven-publish"
    id "idea"
    id "eclipse"
    id "org.springframework.boot"
    //id "org.springframework.boot.aot"
    id "com.google.cloud.tools.jib"
    id "com.gorylenko.gradle-git-properties"
    id "com.github.node-gradle.node"
    id "org.liquibase.gradle"
    id "io.spring.nohttp"
    id 'de.undercouch.download' version '5.6.0'
    id "com.github.ben-manes.versions" version "0.51.0"
    // id 'org.graalvm.buildtools.native' version '0.10.2'
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.withType(JavaExec) {
    systemProperty "ASSIMBLY_ENV", System.getProperty("ASSIMBLY_ENV")
}

group = "org.assimbly.gateway"
version = '5.0.0'
description = "A message gateway"

apply from: "$rootDir/scripts/upgrade/upgrade.gradle"
apply from: "$rootDir/scripts/resources/resources.gradle"
apply from: "$rootDir/scripts/version/version.gradle"
apply from: "gradle/docker.gradle"
apply plugin: 'maven-publish'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'eclipse'
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here


configurations.all {
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    exclude group: 'org.jboss.slf4j', module: 'slf4j-jboss-logmanager'
    exclude group: "org.slf4j", module: "slf4j-nop"
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "org.slf4j", module: "slf4j-simple"
    exclude group: "org.apache.logging.log4j", module: 'log4j-slf4j-impl'
    exclude group: 'commons-logging', module: 'commons-logging'
    exclude group: 'xerces', module: 'xercesImpl'
    //exclude group: 'org.eclipse.angus', module: 'angus-activation'
    resolutionStrategy {
        force 'org.eclipse.angus:angus-mail:2.0.3'
        force 'jakarta.mail:jakarta.mail-api:2.1.3'
        force 'jakarta.activation:jakarta.activation-api:2.1.3'
    }
}

if (project.hasProperty("headless")) {
    apply from: "gradle/profile_headless.gradle"
}
else if (project.hasProperty("prod") || project.hasProperty("gae")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

if (project.hasProperty("gae")) {
    apply plugin: 'maven'
    apply plugin: 'org.springframework.boot.experimental.thin-launcher'
    apply plugin: 'io.spring.dependency-management'
    appengineStage.dependsOn thinResolve
}

idea {
    module {
        excludeDirs += files("node_modules")
    }
}

eclipse {
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
            }
        }
    }
}

// Example images
// image = 'eclipse-temurin:21' (temurin on docker)
// image = 'open-21-jdk-jammy' (semeru on dockerhub)
// image = 'icr.io/appcafe/open-liberty:full-java21-openj9-ubi-minimal' (semeru minimal)
// image = 'container-registry.oracle.com/graalvm/jdk:21' (graalvm from Oracle registry)
// image = 'icr.io/appcafe/open-liberty/full-java21-openj9-ubi-minimal'
// image = 'container-registry.oracle.com/graalvm/jdk:21'
// image = 'azul/zulu-openjdk:21-jdk-crac-latest' (support for crac)

//build container image
jib {
    from {
        image = 'container-registry.oracle.com/graalvm/jdk:21'
    }
    to {
        image = 'assimbly/gateway-full'
    }
    container {
        ports = ['1000', '1616','1617', '2000-2003/udp', '8088', '8443', '61616','61617','9000','9001']
        format = 'OCI'
    }
    containerizingMode = 'exploded'
    extraDirectories {
        paths {
            path {
                // copies the contents of 'src/main/jib' into '/' on the container
                from = file('src/main/jib')
            }
            path {
                // copies the contents of 'src/main/another/dir' into '/extras' on the container
                from = file('src/main/data')
                into = '/data'
            }
        }
        permissions = [
            '/entrypoint.sh': '755',
            '/data/**': '775',
            '/data/**/*': '775',
        ]
    }

}


defaultTasks "bootRun"

springBoot {
    mainClassName = "org.assimbly.gateway.GatewayApp"
}

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.required = false
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    description = "Execute integration tests."
    group = "verification"
    include "**/*IT*", "**/*IntTest*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.required = false
}

check.dependsOn integrationTest
task testReport(type: TestReport) {
    destinationDirectory = file("$buildDir/reports/tests")
    getTestResults()
}

task integrationTestReport(type: TestReport) {
    destinationDirectory = file("$buildDir/reports/tests")
    getTestResults()
}

if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

task getDeps(type: Copy) {
    from sourceSets.main.runtimeClasspath
    into 'runtime/'
}


project.ext.diffChangelogFile = "src/main/resources/config/liquibase/changelog/" + new Date().format("yyyyMMddHHmmss") + "_changelog.xml"


liquibase {
    activities {
        main {
            driver "org.h2.Driver"
            url "jdbc:h2:file:./target/h2db/db/gateway"
            username "gateway"
            password ""
            changeLogFile "src/main/resources/config/liquibase/master.xml"
            defaultSchemaName ""
            logLevel "debug"
            classpath "src/main/resources/"
        }
        diffLog {
            driver "org.h2.Driver"
            url "jdbc:h2:file:./target/h2db/db/gateway"
            username "gateway"
            password ""
            changeLogFile project.ext.diffChangelogFile
            referenceUrl "hibernate:spring:org.assimbly.gateway.domain?dialect=org.hibernate.dialect.H2Dialect&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
            defaultSchemaName ""
            logLevel "debug"
            classpath "$buildDir/classes/java/main"
        }
    }

    runList = project.ext.runList
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

checkstyle {
    toolVersion "${checkstyle_version}"
    configFile file("checkstyle.xml")
    checkstyleTest.enabled = false
}
nohttp {
    source.include "build.gradle", "README.md"
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"

    liquibaseRuntime.extendsFrom(sourceSets.main.compileClasspath)

    compile { transitive = false }
    all {
        resolutionStrategy {
            // force to use latest liquibase instead of default by Spring dependencies
            force 'org.liquibase:liquibase-core:4.29.1'
            force 'implementation "org.hibernate.orm:hibernate-core:6.5.2.Final'
            force 'implementation "org.hibernate.orm:hibernate-jcache:6.5.2.Final'
            force 'implementation "org.hibernate.orm:hibernate-envers:6.5.2.Final'

            eachDependency { DependencyResolveDetails details ->
                if (details.requested.group == 'org.apache.activemq' && details.requested.name.startsWith('artemis') ) {
                    details.useVersion("2.36.0")
                }
                if (details.requested.group == 'org.apache.activemq' && details.requested.name.startsWith('activemq') && !details.requested.name.startsWith('activemq-artemis') && !details.requested.name.startsWith('activemq-branding')) {
                    details.useVersion("6.1.2")
                }
            }
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()

    /*
    maven{  name = "Aurea"
        url "https://int-factory.aurea.com/nexus/content/repositories/sonic-releases/"
    }

    maven{ name = "Assimbly Base"
        url = uri("https://maven.pkg.github.com/assimbly/base")
        credentials {
            username = project.findProperty("mavenUser") ?: System.getenv("GITHUB_ACTOR")
            password = project.findProperty("mavenToken") ?: System.getenv("GITHUB_TOKEN")}
    }

    maven{ name = "Assimbly Runtime"
        url = uri("https://maven.pkg.github.com/assimbly/runtime")
        credentials {
            username = project.findProperty("mavenUser") ?: System.getenv("GITHUB_ACTOR")
            password = project.findProperty("mavenToken") ?: System.getenv("GITHUB_TOKEN")}
    }

    maven{  name = "Assimbly Custom Components"
        url = uri("https://maven.pkg.github.com/assimbly/custom-components")
        credentials {
            username = project.findProperty("mavenUser") ?: System.getenv("GITHUB_ACTOR")
            password = project.findProperty("mavenToken") ?: System.getenv("GITHUB_TOKEN")}
    }

     */

}

dependencies {

    implementation 'org.crac:crac:1.5.0'

    implementation group: "org.assimbly", name: "common-base", version: "${version}"

    implementation "net.logstash.logback:logstash-logback-encoder:8.0"

    implementation "com.mattbertolini:liquibase-slf4j:5.0.0"

    implementation 'tech.jhipster:jhipster-framework:8.6.0'

    compileOnly "jakarta.servlet:jakarta.servlet-api:6.1.0"

    implementation "org.eclipse.angus:angus-mail:2.0.3"
    implementation "jakarta.mail:jakarta.mail-api:2.1.3"
    implementation "jakarta.activation:jakarta.activation-api:2.1.3"

    implementation "io.dropwizard.metrics:metrics-core"
    implementation "io.dropwizard.metrics:metrics-json"

    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "io.prometheus:simpleclient"
    implementation "net.logstash.logback:logstash-logback-encoder"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate6"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.module:jackson-module-afterburner"
    implementation "javax.cache:cache-api"
    implementation "com.zaxxer:HikariCP"
    implementation "org.apache.commons:commons-lang3"
    implementation "commons-io:commons-io"

    implementation 'jakarta.persistence:jakarta.persistence-api'
    implementation "org.ehcache:ehcache"
    implementation "org.hibernate.orm:hibernate-core:${hibernate_version}"
    implementation "org.hibernate.orm:hibernate-jcache:${hibernate_version}"
    implementation "org.hibernate.orm:hibernate-envers:${hibernate_version}"
    implementation "org.hibernate.validator:hibernate-validator:8.0.1.Final"

    implementation "org.liquibase:liquibase-core:${liquibase_version}"
    liquibaseRuntime "org.liquibase:liquibase-core:${liquibase_version}"
    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate6:${liquibase_version}"

    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "org.springframework.boot:spring-boot-loader-tools"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
    implementation "org.springframework.boot:spring-boot-starter-validation"

    //Only one of web server can be active: tomcat, undertow or jetty

    //To use Tomcat
    //implementation ("org.springframework.boot:spring-boot-starter-web")

    //To use Undertow
    implementation ("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"

    //To Use Jetty
    //implementation ("org.springframework.boot:spring-boot-starter-web") {
    //    exclude module: "spring-boot-starter-tomcat"
    //    exclude module: "commons-logging"
    //}
    //implementation "org.springframework.boot:spring-boot-starter-jetty"
    //https://www.eclipse.org/jetty/documentation/jetty-9/index.html#quickstart-webapp
    //implementation 'org.eclipse.jetty:jetty-quickstart'

    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.springframework:spring-context-support"
    implementation "org.springframework:spring-messaging"
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-data"
    implementation "org.springframework.security:spring-security-web"
    implementation "org.springframework.security:spring-security-messaging"
    implementation "org.mapstruct:mapstruct:${mapstruct_version}"
    implementation "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    implementation "com.mysql:mysql-connector-j"
    liquibaseRuntime "com.mysql:mysql-connector-j"

    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml"
    implementation "org.jdom:jdom2"
    implementation "org.quartz-scheduler:quartz"

    implementation 'org.yaml:snakeyaml'

    implementation "com.warrenstrange:googleauth:1.5.0"

    implementation "org.mongodb:mongodb-driver-sync:4.7.2"
    implementation "org.mongodb:mongodb-driver-core:4.7.2"

    implementation group: "org.assimbly", name: "database-drivers", version: "${version}", changing: true

    if (project.hasProperty("integration") || project.hasProperty("headless")) {
        implementation group: "org.assimbly", name: "integration-rest", version: "${version}", changing: true
    }else if (project.hasProperty("broker")) {
        implementation group: "org.assimbly", name: "broker-rest", version: "${version}", changing: true
    }else{
        implementation group: "org.assimbly", name: "integration-rest", version: "${version}", changing: true
        implementation group: "org.assimbly", name: "broker-rest", version: "${version}", changing: true
    }

    if (project.hasProperty("full")){
        implementation group:  "org.assimbly", name: "aggregate", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "amazon", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "csvtoxml", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "docconverter", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "edi", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "edifact", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "edifactdotweb", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "edifactstandards", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "encoder", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "enrich", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "exceltoxml", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "flv", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "formtoxml", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "tenantvariables", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "googledrive", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "jsontoxmllegacy", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "oauth2token", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "oriflame", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "pdf", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "pdftotext", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "replace", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "sandbox", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "smb", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "soap", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "simplereplace", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "sql", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "xmltocsv", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "xmltoexcel", version: "${version}", changing: true
        implementation group:  "org.assimbly", name: "xmltojsonlegacy", version: "${version}", changing: true
    }

    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    annotationProcessor "org.hibernate:hibernate-jpamodelgen:${hibernate_version}"
    annotationProcessor ("org.springframework.boot:spring-boot-configuration-processor") {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testImplementation "com.jayway.jsonpath:json-path"
    testImplementation ("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "org.assertj:assertj-core"
    testImplementation "junit:junit"
    testImplementation "org.mockito:mockito-core"
    testImplementation "com.mattbertolini:liquibase-slf4j"
    testImplementation "org.hamcrest:hamcrest-library"
    runtimeOnly "com.h2database:h2:2.3.230"
    liquibaseRuntime "com.h2database:h2"

}

if (project.hasProperty("gae")) {
    task createPom {
        def basePath = 'build/resources/main/META-INF/maven'
        doLast {
            pom {
                withXml(dependencyManagement.pomConfigurer)
            }.writeTo("${basePath}/${project.group}/${project.name}/pom.xml")
        }
    }
    bootJar.dependsOn = [createPom]
}

tasks.named('bootJar') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

//Build different jar based on type of application
if (project.hasProperty("integration")){
    sourceSets {
        main {
            java {
                exclude 'org/assimbly/gateway/config/memory/**'
                exclude 'org/assimbly/gateway/web/rest/headless/**'
                exclude 'org/assimbly/gateway/web/rest/broker/**'
            }
        }
    }
}else if (project.hasProperty("broker")) {
    sourceSets {
        main {
            java {
                exclude 'org/assimbly/gateway/camel/**'
                exclude 'org/assimbly/gateway/config/importing/Import.java'
                exclude 'org/assimbly/gateway/config/memory/**'
                exclude 'org/assimbly/gateway/web/rest/headless/**'
                exclude 'org/assimbly/gateway/web/rest/integration/**'
                exclude 'org/assimbly/gateway/web/rest/gateway/EnvironmentVariablesResource.java'
                exclude 'org/assimbly/gateway/web/rest/gateway/GroupResource.java'
            }
        }
    }
}else if (project.hasProperty("headless")) {
    sourceSets {
        main {
            java {

                exclude 'org/assimbly/gateway/web/rest/broker/**'
                exclude 'org/assimbly/gateway/web/rest/gateway/**'
                exclude 'org/assimbly/gateway/web/rest/integration/**'

                exclude 'org/assimbly/gateway/config/database/**'

                exclude 'org/assimbly/gateway/config/audit/*'
                exclude 'org/assimbly/gateway/config/exporting/*'
                exclude 'org/assimbly/gateway/config/importing/*'
                exclude 'org/assimbly/gateway/config/scheduling/*'

                exclude 'org/assimbly/gateway/domain/*'
                exclude 'org/assimbly/gateway/repository/*'
                exclude 'org/assimbly/gateway/service/*'

                exclude 'org/assimbly/gateway/security/DomainUserDetailsService.java'
                exclude 'org/assimbly/gateway/web/rest/vm/ManagedUserVM.java'
                exclude 'org/assimbly/gateway/web/rest/errors/ExceptionTranslator.java'

            }
        }
    }
}else {
    sourceSets {
        main {
            java {
                exclude 'org/assimbly/gateway/config/memory/**'
                exclude 'org/assimbly/gateway/web/rest/headless/**'
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {

            if (project.hasProperty("integration")) {
                artifactId = 'integration'
            }else if (project.hasProperty("broker")) {
                artifactId = 'broker'
            }else if (project.hasProperty("headless")) {
                artifactId = 'headless'
            }else{
                artifactId = 'full'
            }

            from components.java
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/assimbly/gateway"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

/**
 * Returns an int representing how mature [version] is.
 * Higher numbers are more mature.
 */
static def maturityLevel(String version) {
    /**
     * Version qualifiers, in order from least to most mature.
     * The most mature is to have no qualifier at all.
     */
    def qualifiers = ["preview", "alpha", "beta", "m", "cr", "rc"]
    def qualifiersRegex = qualifiers.collect { /(?i).*[.\-]$it[.\-\d]*/ }

    def index = qualifiersRegex.findIndexOf { version ==~ it }
    return (index < 0) ? qualifiers.size : index
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        def candidateMaturity = maturityLevel(it.candidate.version)
        def currentMaturity = maturityLevel(it.currentVersion)
        candidateMaturity < currentMaturity
    }
}

//After upgrading execute Gradle wrapper task: ./gradlew wrapper
wrapper {
    gradleVersion = "8.9"
}

if (project.hasProperty("nodeInstall")) {
    node {
        version = "20.13.1"
        npmVersion = "9.5.1"
        yarnVersion = "1.22.19"
        download = true
    }
}
compileJava.dependsOn processResources
processResources.dependsOn cleanResources,bootBuildInfo
bootBuildInfo.mustRunAfter cleanResources
